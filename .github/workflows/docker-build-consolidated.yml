name: Build ARM64 Docker Images

on:
  # Allow manual workflow triggering from UI
  workflow_dispatch:
    inputs:
      bitcoin_version:
        description: 'Bitcoin version'
        required: true
        default: '26.0'
      counterparty_branch:
        description: 'Counterparty branch/tag'
        required: true
        default: 'develop'
      network_profile:
        description: 'Network profile'
        required: true
        default: 'mainnet'
        type: choice
        options:
          - mainnet
          - testnet3
          - testnet4
          - regtest
      build_mode:
        description: 'Build optimization mode'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard   # Standard build with QEMU emulation
          - parallel   # Parallel builds with matrix jobs
          - optimized  # Optimized with better caching (for GitHub Team/Business plans)

# Cancel in-progress runs of the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Standard single-job build (similar to original docker-build.yml)
  standard-build:
    if: github.event.inputs.build_mode == 'standard'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build Bitcoin ARM64 image
      - name: Build Bitcoin ARM64 image
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          file: ./docker/Dockerfile.bitcoind
          platforms: linux/arm64
          push: true
          tags: xcparty/bitcoind-arm64:${{ github.event.inputs.bitcoin_version }}
          build-args: |
            BITCOIN_VERSION=${{ github.event.inputs.bitcoin_version }}

      # Clone Counterparty repo
      - name: Clone Counterparty Repo
        run: |
          git clone https://github.com/CounterpartyXCP/counterparty-core.git /tmp/counterparty-core
          cd /tmp/counterparty-core
          git checkout ${{ github.event.inputs.counterparty_branch }}
          
      # Create optimized Dockerfile for Counterparty
      - name: Create Counterparty Dockerfile
        run: |
          cat > /tmp/counterparty-core/Dockerfile.arm64 << 'EOF'
          # Build stage
          FROM --platform=linux/arm64 python:3.10-bullseye AS builder

          # Install dependencies for ARM64
          RUN apt-get update && apt-get install -y \
              python3-dev python3-pip \
              libleveldb-dev \
              curl gnupg \
              libclang-dev \
              pkg-config \
              libssl-dev \
              git

          # Install Rust (for ARM64)
          RUN curl https://sh.rustup.rs -sSf | sh -s -- -y
          ENV PATH="/root/.cargo/bin:${PATH}"

          # Install build tools
          RUN pip3 install maturin wheel

          # Copy README first for more efficient layer caching
          COPY README.md /README.md

          # Install counterparty-rs
          COPY ./counterparty-rs /counterparty-rs
          WORKDIR /counterparty-rs
          # Build wheel instead of installing directly
          RUN pip3 wheel . -w /wheels

          # Install counterparty-core
          COPY ./counterparty-core /counterparty-core
          WORKDIR /counterparty-core
          # Build wheel instead of installing directly
          RUN pip3 wheel . -w /wheels

          # Runtime stage (much smaller)
          FROM --platform=linux/arm64 python:3.10-slim-bullseye

          # Install only runtime dependencies
          RUN apt-get update && apt-get install -y \
              libleveldb-dev \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*

          # Copy wheels from builder
          COPY --from=builder /wheels /wheels

          # Install packages from wheels
          RUN pip3 install /wheels/*.whl && rm -rf /wheels

          # Set working directory
          WORKDIR /app

          # Set entrypoint
          ENTRYPOINT ["counterparty-server"]
          CMD ["start"]
          EOF

      # Build Counterparty ARM64 image
      - name: Build Counterparty ARM64 image
        uses: docker/build-push-action@v5
        with:
          context: /tmp/counterparty-core
          file: /tmp/counterparty-core/Dockerfile.arm64
          platforms: linux/arm64
          push: true
          tags: xcparty/counterparty-core-arm64:${{ github.event.inputs.counterparty_branch }}

      # Create template and upload as artifact
      - name: Create template docker-compose file
        run: |
          cat > docker-compose-arm64-template.yml << 'EOF'
          x-bitcoind-common: &bitcoind-common
            image: xcparty/bitcoind-arm64:${BITCOIN_VERSION:-26.0}
            stop_grace_period: 1m
            volumes:
              - bitcoin_data:/bitcoin/.bitcoin
            restart: unless-stopped

          x-counterparty-common: &counterparty-common
            image: xcparty/counterparty-core-arm64:${COUNTERPARTY_BRANCH:-develop}
            stop_grace_period: 1m
            volumes:
              - bitcoin_data:/root/.bitcoin
              - counterparty_data:/data
            environment:
              - XDG_DATA_HOME=/data/
              - XDG_LOG_HOME=/data/
            restart: unless-stopped

          services:
            # Inherit from existing docker-compose.yml structure

          volumes:
            data:
              driver: local
              driver_opts:
                type: none
                o: bind
                device: ${COUNTERPARTY_DOCKER_DATA:-/bitcoin-data}/bitcoin
          EOF
          
          mkdir -p artifacts
          cp docker-compose-arm64-template.yml artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-template
          path: artifacts/
          
      # Trigger Docker Hub info update
      - name: Trigger Docker Info Update
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'update-docker-info.yml',
                ref: 'main'
              });
              console.log('Successfully triggered the update-docker-info workflow');
            } catch (error) {
              console.error('Failed to trigger workflow:', error);
            }

  # Parallel build jobs using matrix strategy (for GitHub Team/Business plans)
  parallel-build:
    if: github.event.inputs.build_mode == 'parallel'
    name: Parallel Build - ${{ matrix.component }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        component: [bitcoin, counterparty]
      fail-fast: false
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Bitcoin-specific steps
      - name: Build Bitcoin ARM64 image
        if: matrix.component == 'bitcoin'
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          file: ./docker/Dockerfile.bitcoind
          platforms: linux/arm64
          push: true
          tags: xcparty/bitcoind-arm64:${{ github.event.inputs.bitcoin_version }}
          build-args: |
            BITCOIN_VERSION=${{ github.event.inputs.bitcoin_version }}

      # Counterparty-specific steps
      - name: Clone Counterparty Repo
        if: matrix.component == 'counterparty'
        run: |
          git clone https://github.com/CounterpartyXCP/counterparty-core.git /tmp/counterparty-core
          cd /tmp/counterparty-core
          git checkout ${{ github.event.inputs.counterparty_branch }}
          
      - name: Create Counterparty Dockerfile
        if: matrix.component == 'counterparty'
        run: |
          cat > /tmp/counterparty-core/Dockerfile.arm64 << 'EOF'
          # Build stage
          FROM --platform=linux/arm64 python:3.10-bullseye AS builder

          # Install dependencies for ARM64
          RUN apt-get update && apt-get install -y \
              python3-dev python3-pip \
              libleveldb-dev \
              curl gnupg \
              libclang-dev \
              pkg-config \
              libssl-dev \
              git

          # Install Rust (for ARM64)
          RUN curl https://sh.rustup.rs -sSf | sh -s -- -y
          ENV PATH="/root/.cargo/bin:${PATH}"

          # Install build tools
          RUN pip3 install maturin wheel

          # Copy README first for more efficient layer caching
          COPY README.md /README.md

          # Install counterparty-rs
          COPY ./counterparty-rs /counterparty-rs
          WORKDIR /counterparty-rs
          # Build wheel instead of installing directly
          RUN pip3 wheel . -w /wheels

          # Install counterparty-core
          COPY ./counterparty-core /counterparty-core
          WORKDIR /counterparty-core
          # Build wheel instead of installing directly
          RUN pip3 wheel . -w /wheels

          # Runtime stage (much smaller)
          FROM --platform=linux/arm64 python:3.10-slim-bullseye

          # Install only runtime dependencies
          RUN apt-get update && apt-get install -y \
              libleveldb-dev \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*

          # Copy wheels from builder
          COPY --from=builder /wheels /wheels

          # Install packages from wheels
          RUN pip3 install /wheels/*.whl && rm -rf /wheels

          # Set working directory
          WORKDIR /app

          # Set entrypoint
          ENTRYPOINT ["counterparty-server"]
          CMD ["start"]
          EOF

      - name: Build Counterparty ARM64 image
        if: matrix.component == 'counterparty'
        uses: docker/build-push-action@v5
        with:
          context: /tmp/counterparty-core
          file: /tmp/counterparty-core/Dockerfile.arm64
          platforms: linux/arm64
          push: true
          tags: xcparty/counterparty-core-arm64:${{ github.event.inputs.counterparty_branch }}

  # Artifact creation job for parallel builds
  parallel-artifacts:
    if: github.event.inputs.build_mode == 'parallel'
    needs: parallel-build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Create template docker-compose file
        run: |
          cat > docker-compose-arm64-template.yml << 'EOF'
          x-bitcoind-common: &bitcoind-common
            image: xcparty/bitcoind-arm64:${BITCOIN_VERSION:-26.0}
            stop_grace_period: 1m
            volumes:
              - bitcoin_data:/bitcoin/.bitcoin
            restart: unless-stopped

          x-counterparty-common: &counterparty-common
            image: xcparty/counterparty-core-arm64:${COUNTERPARTY_BRANCH:-develop}
            stop_grace_period: 1m
            volumes:
              - bitcoin_data:/root/.bitcoin
              - counterparty_data:/data
            environment:
              - XDG_DATA_HOME=/data/
              - XDG_LOG_HOME=/data/
            restart: unless-stopped

          services:
            # Inherit from existing docker-compose.yml structure

          volumes:
            data:
              driver: local
              driver_opts:
                type: none
                o: bind
                device: ${COUNTERPARTY_DOCKER_DATA:-/bitcoin-data}/bitcoin
          EOF
          
          mkdir -p artifacts
          cp docker-compose-arm64-template.yml artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-template
          path: artifacts/
          
      - name: Trigger Docker Info Update
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'update-docker-info.yml',
                ref: 'main'
              });
              console.log('Successfully triggered the update-docker-info workflow');
            } catch (error) {
              console.error('Failed to trigger workflow:', error);
            }
            
  # Optimized build with advanced caching and settings (for GitHub Team/Business plans)
  optimized-build:
    if: github.event.inputs.build_mode == 'optimized'
    name: Optimized Build - ${{ matrix.component }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        component: [bitcoin, counterparty]
      fail-fast: false
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Use larger driver with more memory
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Bitcoin-specific steps with enhanced caching
      - name: Build Bitcoin ARM64 image
        if: matrix.component == 'bitcoin'
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          file: ./docker/Dockerfile.bitcoind
          platforms: linux/arm64
          push: true
          tags: xcparty/bitcoind-arm64:${{ github.event.inputs.bitcoin_version }}
          build-args: |
            BITCOIN_VERSION=${{ github.event.inputs.bitcoin_version }}
          cache-from: type=registry,ref=xcparty/bitcoind-arm64:cache
          cache-to: type=registry,ref=xcparty/bitcoind-arm64:cache,mode=max
          provenance: false
          sbom: false

      # Counterparty-specific steps with enhanced caching
      - name: Clone Counterparty Repo
        if: matrix.component == 'counterparty'
        run: |
          git clone https://github.com/CounterpartyXCP/counterparty-core.git /tmp/counterparty-core
          cd /tmp/counterparty-core
          git checkout ${{ github.event.inputs.counterparty_branch }}
          
      - name: Create Counterparty Dockerfile
        if: matrix.component == 'counterparty'
        run: |
          cat > /tmp/counterparty-core/Dockerfile.arm64 << 'EOF'
          # Build stage
          FROM --platform=linux/arm64 python:3.10-bullseye AS builder

          # Install dependencies for ARM64
          RUN apt-get update && apt-get install -y \
              python3-dev python3-pip \
              libleveldb-dev \
              curl gnupg \
              libclang-dev \
              pkg-config \
              libssl-dev \
              git

          # Install Rust (for ARM64)
          RUN curl https://sh.rustup.rs -sSf | sh -s -- -y
          ENV PATH="/root/.cargo/bin:${PATH}"

          # Install build tools
          RUN pip3 install maturin wheel

          # Copy README first for more efficient layer caching
          COPY README.md /README.md

          # Install counterparty-rs
          COPY ./counterparty-rs /counterparty-rs
          WORKDIR /counterparty-rs
          # Build wheel instead of installing directly
          RUN pip3 wheel . -w /wheels

          # Install counterparty-core
          COPY ./counterparty-core /counterparty-core
          WORKDIR /counterparty-core
          # Build wheel instead of installing directly
          RUN pip3 wheel . -w /wheels

          # Runtime stage (much smaller)
          FROM --platform=linux/arm64 python:3.10-slim-bullseye

          # Install only runtime dependencies
          RUN apt-get update && apt-get install -y \
              libleveldb-dev \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*

          # Copy wheels from builder
          COPY --from=builder /wheels /wheels

          # Install packages from wheels
          RUN pip3 install /wheels/*.whl && rm -rf /wheels

          # Set working directory
          WORKDIR /app

          # Set entrypoint
          ENTRYPOINT ["counterparty-server"]
          CMD ["start"]
          EOF

      - name: Build Counterparty ARM64 image
        if: matrix.component == 'counterparty'
        uses: docker/build-push-action@v5
        with:
          context: /tmp/counterparty-core
          file: /tmp/counterparty-core/Dockerfile.arm64
          platforms: linux/arm64
          push: true
          tags: xcparty/counterparty-core-arm64:${{ github.event.inputs.counterparty_branch }}
          cache-from: type=registry,ref=xcparty/counterparty-core-arm64:cache
          cache-to: type=registry,ref=xcparty/counterparty-core-arm64:cache,mode=max
          provenance: false
          sbom: false

  # Artifact creation job for optimized builds
  optimized-artifacts:
    if: github.event.inputs.build_mode == 'optimized'
    needs: optimized-build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Create template docker-compose file
        run: |
          cat > docker-compose-arm64-template.yml << 'EOF'
          x-bitcoind-common: &bitcoind-common
            image: xcparty/bitcoind-arm64:${BITCOIN_VERSION:-26.0}
            stop_grace_period: 1m
            volumes:
              - bitcoin_data:/bitcoin/.bitcoin
            restart: unless-stopped

          x-counterparty-common: &counterparty-common
            image: xcparty/counterparty-core-arm64:${COUNTERPARTY_BRANCH:-develop}
            stop_grace_period: 1m
            volumes:
              - bitcoin_data:/root/.bitcoin
              - counterparty_data:/data
            environment:
              - XDG_DATA_HOME=/data/
              - XDG_LOG_HOME=/data/
            restart: unless-stopped

          services:
            # Inherit from existing docker-compose.yml structure

          volumes:
            data:
              driver: local
              driver_opts:
                type: none
                o: bind
                device: ${COUNTERPARTY_DOCKER_DATA:-/bitcoin-data}/bitcoin
          EOF
          
          mkdir -p artifacts
          cp docker-compose-arm64-template.yml artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-template
          path: artifacts/
          
      - name: Trigger Docker Info Update
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'update-docker-info.yml',
                ref: 'main'
              });
              console.log('Successfully triggered the update-docker-info workflow');
            } catch (error) {
              console.error('Failed to trigger workflow:', error);
            }
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Counterparty ARM64 on AWS Graviton with ST1 volume - Cost-optimized'

# Define mappings for AMI IDs
Mappings:
  # Ubuntu 24.04 LTS (Noble Numbat) ARM64 AMIs - updated 2025-04-03
  Ubuntu2404:
    us-east-1:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - 2025-04-02
    us-east-2:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
    us-west-1:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
    us-west-2: 
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
    eu-west-1:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
    ap-northeast-1:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
    ap-southeast-1:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
    ap-southeast-2:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
      
  # Ubuntu 22.04 LTS (Jammy Jellyfish) ARM64 AMIs - updated 2025-04-03
  Ubuntu2204:
    us-east-1:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - 2025-04-02
    us-east-2:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1
    us-west-1:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1
    us-west-2: 
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1
    eu-west-1:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1
    ap-northeast-1:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1
    ap-southeast-1:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1
    ap-southeast-2:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1

# Define conditions
Conditions:
  CreateNewKey: !Equals [!Ref CreateNewKeyPair, "true"]
  UseExistingSG: !Equals [!Ref UseExistingSecurityGroup, "true"]
  CreateNewSG: !Not [!Condition UseExistingSG]
  UseUbuntu2404: !Equals [!Ref UbuntuVersion, "24.04"]
  PublicRpcEnabled: !Equals [!Ref PublicRpcAccess, "true"]
  EnableSnapshotsCondition: !Equals [!Ref EnableSnapshots, "true"]
  
  # Network profile conditions
  UseMainnetProfile: !Equals [!Ref NetworkProfile, "mainnet"]
  UseTestnet3Profile: !Equals [!Ref NetworkProfile, "testnet3"]
  UseTestnet4Profile: !Equals [!Ref NetworkProfile, "testnet4"]
  UseRegtestProfile: !Equals [!Ref NetworkProfile, "regtest"]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Instance Configuration"
        Parameters:
          - InstanceType
          - KeyName
          - CreateNewKeyPair
          - NewKeyPairName
          - RootVolumeSize
          - DataVolumeSize
      - Label:
          default: "Storage and Backup"
        Parameters:
          - EnableSnapshots
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - SubnetId
          - YourIp
          - UseExistingSecurityGroup
          - ExistingSecurityGroupId
      - Label:
          default: "Counterparty Configuration"
        Parameters:
          - BitcoinVersion
          - CounterpartyBranch
          - CounterpartyTag
          - NetworkProfile
          - UbuntuVersion
    
    ParameterLabels:
      KeyName:
        default: "Key Pair"
      CreateNewKeyPair:
        default: "Create New Key Pair?"
      NewKeyPairName:
        default: "New Key Pair Name"
      UseExistingSecurityGroup:
        default: "Use Existing Security Group?"
      ExistingSecurityGroupId:
        default: "Existing Security Group ID"
      UbuntuVersion:
        default: "Ubuntu Version"
      NetworkProfile:
        default: "Network Profile (mainnet/testnet/regtest)"

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  CreateNewKeyPair:
    Description: Create a new key pair for this instance? (Not yet implemented, available in AWS Console)
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

  NewKeyPairName:
    Description: Name for the new key pair (only used if creating a new key pair)
    Type: String
    Default: "counterparty-keypair"
    MinLength: 1
    MaxLength: 255
    ConstraintDescription: Must be a valid key pair name.
  
  VpcId:
    Description: VPC ID where the instance will be launched
    Type: AWS::EC2::VPC::Id
  
  SubnetId:
    Description: Subnet ID where the instance will be launched
    Type: AWS::EC2::Subnet::Id
    
  UseExistingSecurityGroup:
    Description: Use an existing security group instead of creating a new one?
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  
  ExistingSecurityGroupId:
    Description: ID of existing security group (only used if UseExistingSecurityGroup is true)
    Type: String
    Default: "sg-12345678abcdef012"
    AllowedPattern: "^sg-[a-zA-Z0-9]{8,17}$"
    ConstraintDescription: "Security Group ID must be in the format sg-xxxxxxxx or sg-xxxxxxxxxxxxxxxxx"
    
  PublicRpcAccess:
    Description: Allow public access to RPC port 4000? (Warning - Security Risk)
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
      
  
  InstanceType:
    Description: EC2 instance type (Graviton-based)
    Type: String
    Default: t4g.large
    AllowedValues:
      - t4g.large     # Lowest cost, burstable performance (~$24.50/month)
      - t4g.xlarge    # Burstable, more memory
      - m6g.large     # Previous gen, consistent performance
      - m6g.xlarge    # Previous gen, higher memory
      - m7g.large     # Current gen, good balance (more expensive)
      - m7g.xlarge    # Current gen, higher memory
      - m7g.2xlarge   # Current gen, highest performance
      - c7g.large     # Compute optimized, good for blockchain (~$28/month)
      - c7g.xlarge    # Compute optimized, higher performance
    ConstraintDescription: Must be a valid Graviton-based instance type.
  
  RootVolumeSize:
    Description: Size of the root volume in GB
    Type: Number
    Default: 20
    MinValue: 8
    MaxValue: 500
  
  DataVolumeSize:
    Description: Size of the data volume in GB
    Type: Number
    Default: 1000
    MinValue: 500
    MaxValue: 16000
  
  YourIp:
    Description: Your IP address to allow SSH access (e.g., 123.123.123.123/32)
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  
  BitcoinVersion:
    Description: Bitcoin Core version to use
    Type: String
    Default: "26.0"
  
  CounterpartyBranch:
    Description: Counterparty branch to use
    Type: String
    Default: "master"
  
  CounterpartyTag:
    Description: Counterparty tag to use (optional)
    Type: String
    Default: ""
    
  UbuntuVersion:
    Description: Ubuntu version to use
    Type: String
    Default: "24.04"
    AllowedValues:
      - "24.04"
      - "22.04"
      
  GitHubToken:
    Description: GitHub personal access token for private repository access (optional)
    Type: String
    Default: ""
    NoEcho: true
      
  NetworkProfile:
    Description: Bitcoin/Counterparty network profile to use
    Type: String
    Default: "mainnet"
    AllowedValues:
      - "mainnet"
      - "testnet3"
      - "testnet4"
      - "regtest"
      
  EnableSnapshots:
    Description: Enable automatic EBS snapshots of the data volume
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

Resources:
  # Security Group for the Counterparty node (created if UseExistingSecurityGroup is false)
  CounterpartySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateNewSG
    Properties:
      GroupDescription: Security group for Counterparty node
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref YourIp
        # Bitcoin P2P ports - conditionally exposed based on network profile
        # Mainnet
        - !If
          - UseMainnetProfile
          - IpProtocol: tcp
            FromPort: 8333
            ToPort: 8333
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        # Testnet3
        - !If
          - UseTestnet3Profile
          - IpProtocol: tcp
            FromPort: 18333
            ToPort: 18333
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        # Testnet4
        - !If
          - UseTestnet4Profile
          - IpProtocol: tcp
            FromPort: 49333
            ToPort: 49333
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        # Regtest
        - !If
          - UseRegtestProfile
          - IpProtocol: tcp
            FromPort: 29333
            ToPort: 29333
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
            
        # Counterparty API websocket port
        - IpProtocol: tcp
          FromPort: 4001
          ToPort: 4001
          CidrIp: 0.0.0.0/0
        # Bitcoin RPC ports - conditionally exposed based on network profile
        # Mainnet RPC
        - !If
          - UseMainnetProfile
          - IpProtocol: tcp
            FromPort: 8332
            ToPort: 8332
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Testnet3 RPC
        - !If
          - UseTestnet3Profile
          - IpProtocol: tcp
            FromPort: 18332
            ToPort: 18332
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Testnet4 RPC
        - !If
          - UseTestnet4Profile
          - IpProtocol: tcp
            FromPort: 48332
            ToPort: 48332
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Regtest RPC
        - !If
          - UseRegtestProfile
          - IpProtocol: tcp
            FromPort: 18443
            ToPort: 18443
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Counterparty API ports - conditionally exposed based on network profile
        # Mainnet API
        - !If
          - UseMainnetProfile
          - IpProtocol: tcp
            FromPort: 4000
            ToPort: 4000
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Testnet3 API
        - !If
          - UseTestnet3Profile
          - IpProtocol: tcp
            FromPort: 14000
            ToPort: 14000
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Testnet4 API
        - !If
          - UseTestnet4Profile
          - IpProtocol: tcp
            FromPort: 44000
            ToPort: 44000
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Regtest API
        - !If
          - UseRegtestProfile
          - IpProtocol: tcp
            FromPort: 24000
            ToPort: 24000
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
          
        # Rule 2: Allow VPC internal access using RFC1918 private ranges
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: 10.0.0.0/8  # AWS typically uses this range
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: 172.16.0.0/12
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: 192.168.0.0/16
        
        # Rule 3: Public access to Counterparty API (if enabled)
        - !If
          - PublicRpcEnabled
          - IpProtocol: tcp
            FromPort: 4000
            ToPort: 4000
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sg"

  # ST1 volume for blockchain data
  DataVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !GetAtt CounterpartyInstance.AvailabilityZone
      Size: !Ref DataVolumeSize
      VolumeType: st1
      Tags:
        - Key: Name
          Value: counterparty-data-st1

  # Volume attachment
  DataVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref CounterpartyInstance
      VolumeId: !Ref DataVolume
      Device: /dev/sdf

  # IAM Role for the instance
  CounterpartyInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies: 
        - !If
          - EnableSnapshotsCondition
          - PolicyName: CounterpartySnapshotPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateSnapshot
                    - ec2:DeleteSnapshot
                    - ec2:DescribeSnapshots
                    - ec2:DescribeVolumes
                    - ec2:ModifySnapshotAttribute
                    - ec2:ResetSnapshotAttribute
                  Resource: '*'
          - !Ref AWS::NoValue

  # Instance profile
  CounterpartyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref CounterpartyInstanceRole

  # Optional: Create a new key pair if requested
  # Note: CloudFormation doesn't currently support returning the private key content,
  # so we recommend creating the key pair in the console if needed
  CounterpartyKeyPair:
    Type: AWS::EC2::KeyPair
    Condition: CreateNewKey
    Properties:
      KeyName: !Ref NewKeyPairName
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-keypair"

  # EC2 Instance
  CounterpartyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !If
        - UseUbuntu2404
        - !FindInMap [Ubuntu2404, !Ref "AWS::Region", ARM64AMI]
        - !FindInMap [Ubuntu2204, !Ref "AWS::Region", ARM64AMI]
      KeyName: !If [CreateNewKey, !Ref CounterpartyKeyPair, !Ref KeyName]
      IamInstanceProfile: !Ref CounterpartyInstanceProfile
      SecurityGroupIds:
        - !If [UseExistingSG, !Ref ExistingSecurityGroupId, !Ref CounterpartySecurityGroup]
      SubnetId: !Ref SubnetId
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref RootVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
      Monitoring: true  # Enable detailed CloudWatch monitoring
      Tags:
        - Key: Name
          Value: counterparty-arm64
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update system
          apt-get update && apt-get upgrade -y
          
          # Install basic dependencies first - we need xfsprogs for volume formatting
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common git jq htop iotop xfsprogs bc
          
          # Fix for aws-cli in Ubuntu 24.04
          # First check if AWS CLI is already installed
          if ! command -v aws &> /dev/null; then
            if [ "$(lsb_release -cs)" = "noble" ]; then
              # Use alternative method for Ubuntu 24.04
              curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
              apt-get install -y unzip
              unzip -q awscliv2.zip
              ./aws/install
              rm -rf aws awscliv2.zip
            else
              # Try standard method for older Ubuntu versions
              apt-get install -y awscli || echo "Warning: Could not install awscli package"
            fi
          fi
          
          # Add Docker repository - with improved error handling
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o docker.gpg
          if [ -f docker.gpg ]; then
            gpg --dearmor -o /etc/apt/keyrings/docker.gpg docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update
            
            # Install Docker
            apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
          else
            echo "Failed to download Docker GPG key, using alternative method"
            # Alternative Docker installation using snap as fallback
            apt-get install -y snapd
            snap install docker
          fi
          
          # Add ubuntu user to docker group
          usermod -aG docker ubuntu
          
          # Mount the ST1 volume
          mkdir -p /bitcoin-data
          
          # Find the correct device for the attached volume (NVMe naming can vary)
          DATA_DEVICE=""
          for dev in /dev/nvme*n1; do
            if [ -e "$dev" ] && ! grep -q "$dev" /etc/fstab && [ "$dev" != "/dev/nvme0n1" ]; then
              DATA_DEVICE="$dev"
              echo "Found data device: $DATA_DEVICE"
              break
            fi
          done
          
          # If NVMe device wasn't found, try traditional naming
          if [ -z "$DATA_DEVICE" ] && [ -e "/dev/xvdf" ]; then
            DATA_DEVICE="/dev/xvdf"
            echo "Found data device: $DATA_DEVICE"
          fi
          
          if [ -z "$DATA_DEVICE" ]; then
            echo "Error: Could not find data volume device"
            # Use a fallback directory if volume can't be found
            mkdir -p /bitcoin-data-local
            ln -sf /bitcoin-data-local /bitcoin-data
          else
            # Format the volume if needed
            if ! blkid "$DATA_DEVICE"; then
              echo "Formatting $DATA_DEVICE with XFS filesystem"
              mkfs.xfs -f "$DATA_DEVICE"
            fi
            
            # Mount the volume
            echo "Mounting $DATA_DEVICE to /bitcoin-data"
            mount "$DATA_DEVICE" /bitcoin-data || {
              echo "Mount failed, attempting to force format and mount"
              mkfs.xfs -f "$DATA_DEVICE"
              mount "$DATA_DEVICE" /bitcoin-data
            }
            
            # Add to fstab for persistence
            if ! grep -q "$DATA_DEVICE" /etc/fstab; then
              echo "$DATA_DEVICE /bitcoin-data xfs defaults,nofail 0 2" >> /etc/fstab
            fi
          fi
          
          # Set permissions and create necessary directories
          mkdir -p /bitcoin-data/docker
          mkdir -p /bitcoin-data/bitcoin
          mkdir -p /bitcoin-data/counterparty
          mkdir -p /bitcoin-data/repo
          chown -R ubuntu:ubuntu /bitcoin-data
          chmod -R 755 /bitcoin-data
          
          # Configure Docker to use the ST1 volume
          mkdir -p /etc/docker
          cat > /etc/docker/daemon.json << 'EOF'
          {
            "data-root": "/bitcoin-data/docker",
            "storage-driver": "overlay2",
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "50m",
              "max-file": "2"
            }
          }
          EOF
          
          # Ensure Docker can access the directory
          chmod 711 /bitcoin-data/docker
          
          # Restart Docker service
          systemctl restart docker
          systemctl enable docker
          
          # Create symlink for docker-compose command for compatibility
          if [ -f "/usr/libexec/docker/cli-plugins/docker-compose" ] && [ ! -f "/usr/bin/docker-compose" ]; then
            ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/bin/docker-compose
            chmod +x /usr/bin/docker-compose
          fi
          
          # Clone counterparty-arm64 repository with retry logic
          cd /home/ubuntu
          REPO_URL="https://github.com/stampchain-io/counterparty-arm64.git"
          # Optional GitHub token parameter for private repository access
          # Use the GitHubToken parameter passed to CloudFormation
          if [ ! -z "${GitHubToken}" ]; then
            echo "GitHub token detected, will use for repository access"
          fi
          MAX_RETRIES=3
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Cloning repository (attempt $i of $MAX_RETRIES)..."
            
            if [ -n "${GitHubToken}" ]; then
              # Use token for private repository
              echo "Using GitHub token for private repository access"
              REPO_WITH_TOKEN="https://${GitHubToken}@github.com/stampchain-io/counterparty-arm64.git"
              git clone $REPO_WITH_TOKEN && break
            else
              # Try public access
              git clone $REPO_URL && break
            fi
            
            if [ $i -eq $MAX_RETRIES ]; then
              echo "Failed to clone repository after $MAX_RETRIES attempts"
              echo "If this is a private repository, please provide a GitHubToken parameter"
              exit 1
            fi
            
            echo "Clone failed. Retrying in 5 seconds..."
            sleep 5
          done
          
          # Clone Counterparty Core as well
          echo "Cloning Counterparty Core repository..."
          mkdir -p /bitcoin-data/repo
          chown -R ubuntu:ubuntu /bitcoin-data/repo
          cd /bitcoin-data/repo
          
          # Clone Counterparty Core - this is a public repo but could be changed
          COUNTERPARTY_REPO_URL="https://github.com/CounterpartyXCP/counterparty-core.git"
          
          if [ -n "${GitHubToken}" ]; then
            # Use token for private repository - just in case it becomes private
            COUNTERPARTY_REPO_WITH_TOKEN="https://${GitHubToken}@github.com/CounterpartyXCP/counterparty-core.git"
            sudo -u ubuntu git clone $COUNTERPARTY_REPO_WITH_TOKEN
          else
            # Use public URL
            sudo -u ubuntu git clone $COUNTERPARTY_REPO_URL
          fi
          
          chown -R ubuntu:ubuntu counterparty-arm64
          
          # We no longer need to copy common.sh as we'll use a more robust approach
          # that finds common.sh in the repository structure
          
          # Create symbolic link for counterparty-node pointing to the docker directory
          ln -sf /home/ubuntu/counterparty-arm64/docker /home/ubuntu/counterparty-node
          
          # Ensure entrypoint script is available and executable in system path
          sudo cp /home/ubuntu/counterparty-arm64/docker/bitcoin-entrypoint.sh /usr/local/bin/
          sudo chmod +x /usr/local/bin/bitcoin-entrypoint.sh
          
          chown -R ubuntu:ubuntu /home/ubuntu/counterparty-node
          
          # Make sure all Bitcoin-data directories have correct permissions
          echo "Ensuring proper directory permissions..."
          chown -R ubuntu:ubuntu /bitcoin-data
          chmod -R 755 /bitcoin-data
          sudo -u ubuntu mkdir -p /bitcoin-data/repo/counterparty-core
          
          # Run setup script - retry logic in case of network issues
          echo "Running setup script..."
          su - ubuntu -c "cd counterparty-arm64 && chmod +x scripts/setup.sh && scripts/setup.sh --bitcoin-version '${BitcoinVersion}' --counterparty-branch '${CounterpartyBranch}' --data-dir '/bitcoin-data' --platform 'aws'" || {
            echo "Setup script failed on first attempt. Waiting 30 seconds and retrying..."
            sleep 30
            # Reset permissions and try again
            chown -R ubuntu:ubuntu /bitcoin-data
            chmod -R 755 /bitcoin-data
            su - ubuntu -c "cd counterparty-arm64 && scripts/setup.sh --bitcoin-version '${BitcoinVersion}' --counterparty-branch '${CounterpartyBranch}' --data-dir '/bitcoin-data' --platform 'aws'"
          }
          
          # Create bitcoin.conf file with proper ZMQ settings
          mkdir -p /bitcoin-data/bitcoin/.bitcoin
          cat << 'EOF' > /bitcoin-data/bitcoin/.bitcoin/bitcoin.conf
          # Bitcoin Core configuration file - Created by CloudFormation template
          
          # Explicitly set the data directory
          datadir=/bitcoin/.bitcoin
          
          # RPC Settings
          rpcuser=rpc
          rpcpassword=rpc
          rpcallowip=0.0.0.0/0
          rpcbind=0.0.0.0
          server=1
          listen=1
          addresstype=legacy
          txindex=1
          prune=0
          dbcache=4000
          mempoolfullrbf=1
          
          # ZMQ Settings
          zmqpubrawtx=tcp://0.0.0.0:9332
          zmqpubhashtx=tcp://0.0.0.0:9332
          zmqpubsequence=tcp://0.0.0.0:9332
          zmqpubrawblock=tcp://0.0.0.0:9333
          EOF
          chmod 600 /bitcoin-data/bitcoin/.bitcoin/bitcoin.conf
          chown -R ubuntu:ubuntu /bitcoin-data/bitcoin/.bitcoin
          
          # Create symbolic link to scripts in the home directory
          ln -sf /home/ubuntu/counterparty-arm64/scripts/check-sync-status.sh /home/ubuntu/check-sync-status.sh
          chmod +x /home/ubuntu/check-sync-status.sh
          
          # Update docker-compose.yml to use pre-built Docker Hub images
          echo "Updating docker-compose.yml to use Docker Hub images..."
          
          # Create config directory if it doesn't exist
          mkdir -p /home/ubuntu/.counterparty-arm64
          
          # Create a config.env file for Docker Compose with Docker Hub image references
          # Using printf to avoid heredoc YAML parsing issues
          printf "%s\n" \
            "# Counterparty ARM64 Configuration" \
            "# Generated on $(date)" \
            "COUNTERPARTY_DOCKER_DATA=/bitcoin-data" \
            "COUNTERPARTY_REPO=/bitcoin-data/repo/counterparty-core" \
            "BITCOIN_VERSION=${BitcoinVersion}" \
            "COUNTERPARTY_BRANCH=${CounterpartyBranch}" \
            "COUNTERPARTY_TAG=${CounterpartyTag}" \
            "NETWORK_PROFILE=${NetworkProfile}" \
            "" \
            "# Docker Hub images" \
            "DOCKERHUB_IMAGE_BITCOIND=xcparty/bitcoind-arm64" \
            "DOCKERHUB_IMAGE_COUNTERPARTY=xcparty/counterparty-core-arm64" \
            > /home/ubuntu/.counterparty-arm64/config.env
          chown -R ubuntu:ubuntu /home/ubuntu/.counterparty-arm64
          
          # Create .env file for docker-compose
          cp /home/ubuntu/.counterparty-arm64/config.env /home/ubuntu/counterparty-node/.env
          chown ubuntu:ubuntu /home/ubuntu/counterparty-node/.env
          
          # Build Bitcoin image locally with entrypoint script
          cd /home/ubuntu/counterparty-arm64/docker
          cp bitcoin-entrypoint.sh /usr/local/bin/
          chmod +x /usr/local/bin/bitcoin-entrypoint.sh
          docker build -t bitcoind:arm64-local -f Dockerfile.bitcoind .
          
          # Pull Counterparty image
          docker pull xcparty/counterparty-core-arm64:${CounterpartyBranch}
          docker tag xcparty/counterparty-core-arm64:${CounterpartyBranch} counterparty/counterparty:local
          
          # We'll use the local images as specified in docker-compose.yml
          # No need to modify the image names in docker-compose.yml
          
          # Start Bitcoin and Counterparty services
          echo "Starting services with profile ${NetworkProfile}..."
          cd /home/ubuntu/counterparty-node && docker compose --profile ${NetworkProfile} up -d
          
          # We don't need a cron job to start Counterparty - we'll start it directly
          # Counterparty will start alongside Bitcoin as long as Bitcoin is running
          
          # Wait for Bitcoin to start and verify it's using the correct data directory
          echo "Waiting for Bitcoin to initialize..."
          sleep 15
          
          # Check if Bitcoin is running and using the correct data directory
          BITCOIN_CONTAINER=$(docker ps --format "{{.Names}}" | grep -E "bitcoind" | head -1)
          if [ -n "$BITCOIN_CONTAINER" ]; then
            echo "Bitcoin container $BITCOIN_CONTAINER is running"
            # Run check-sync-status.sh to verify initial sync is starting
            su - ubuntu -c "/home/ubuntu/check-sync-status.sh"
          else
            echo "WARNING: Bitcoin container not running, check logs for errors"
          fi
          
          echo "Deployment completed. Bitcoin and Counterparty services are now starting."
          echo "Check status with: ~/check-sync-status.sh"
          echo "Deploy time: $(date -u) UTC" 
          echo "Build version: fixed-entrypoint-$(date +%s)"
            # No need to wait and start Counterparty separately as we start with the profile
          # This automatically starts both Bitcoin and Counterparty services
          
          # Copy scripts to the home directory for easier access
          cp /home/ubuntu/counterparty-arm64/aws/scripts/check-sync-status.sh /home/ubuntu/
          cp /home/ubuntu/counterparty-arm64/scripts/common.sh /home/ubuntu/
          chmod +x /home/ubuntu/check-sync-status.sh
          chown ubuntu:ubuntu /home/ubuntu/check-sync-status.sh /home/ubuntu/common.sh
          
          # Set up system maintenance and security scripts
          log_info "Setting up system maintenance and security scripts..."
          
          # Set up system-maintenance.sh
          cp /home/ubuntu/counterparty-arm64/aws/scripts/system-maintenance.sh /usr/local/bin/
          chmod +x /usr/local/bin/system-maintenance.sh
          
          # Set up unattended-upgrades
          log_info "Setting up unattended-upgrades for automatic security updates..."
          cp /home/ubuntu/counterparty-arm64/aws/scripts/setup-unattended-upgrades.sh /usr/local/bin/
          chmod +x /usr/local/bin/setup-unattended-upgrades.sh
          /usr/local/bin/setup-unattended-upgrades.sh
          
          # Set up security check script
          cp /home/ubuntu/counterparty-arm64/aws/scripts/security-check.sh /usr/local/bin/
          chmod +x /usr/local/bin/security-check.sh
          
          # Add weekly cron job for system maintenance
          echo "# Weekly system maintenance job for Counterparty ARM64" > /etc/cron.d/counterparty-maintenance
          echo "# Run at 3:30 AM every Sunday" >> /etc/cron.d/counterparty-maintenance
          echo "30 3 * * 0 root /usr/local/bin/system-maintenance.sh > /dev/null 2>&1" >> /etc/cron.d/counterparty-maintenance
          echo "# Run security check at 4:30 AM every Monday" >> /etc/cron.d/counterparty-maintenance
          echo "30 4 * * 1 root /usr/local/bin/security-check.sh > /dev/null 2>&1" >> /etc/cron.d/counterparty-maintenance
          
          # Set up log rotation
          log_info "Setting up log rotation..."
          cp /home/ubuntu/counterparty-arm64/aws/scripts/counterparty-logrotate.conf /etc/logrotate.d/counterparty
          chmod 644 /etc/logrotate.d/counterparty
          
          # Force run logrotate once to make sure it works
          logrotate -f /etc/logrotate.d/counterparty
          
          # Check-sync-status.sh is still useful for monitoring, but we don't need to add it to cron
          # Users can add it to cron manually if they want hourly status checks
          
          # Copy monitoring scripts for disk usage and bitcoin sync
          cp /home/ubuntu/counterparty-arm64/aws/scripts/check-disk-usage.sh /usr/local/bin/
          cp /home/ubuntu/counterparty-arm64/aws/scripts/monitor-bitcoin.sh /usr/local/bin/
          cp /home/ubuntu/counterparty-arm64/aws/scripts/disk-usage-analysis.sh /usr/local/bin/
          chmod +x /usr/local/bin/check-disk-usage.sh /usr/local/bin/monitor-bitcoin.sh /usr/local/bin/disk-usage-analysis.sh
          
          # Set up monthly snapshot if enabled
          if [ "${EnableSnapshots}" = "true" ]; then
              echo "Setting up monthly EBS snapshot cron job..."
              
              # Create the snapshot script line by line instead of heredoc
              echo '#!/bin/bash' > /usr/local/bin/create-snapshot.sh
              echo '# Script to create a snapshot of the data volume' >> /usr/local/bin/create-snapshot.sh
              echo 'VOLUME_ID=$(aws ec2 describe-instances --instance-ids $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --query "Reservations[0].Instances[0].BlockDeviceMappings[?DeviceName==\`/dev/sdf\`].Ebs.VolumeId" --output text)' >> /usr/local/bin/create-snapshot.sh
              echo 'if [ -z "$VOLUME_ID" ]; then' >> /usr/local/bin/create-snapshot.sh
              echo '  echo "Could not determine volume ID, exiting"' >> /usr/local/bin/create-snapshot.sh
              echo '  exit 1' >> /usr/local/bin/create-snapshot.sh
              echo 'fi' >> /usr/local/bin/create-snapshot.sh
              echo '# Create the snapshot with a descriptive name' >> /usr/local/bin/create-snapshot.sh
              echo 'SNAPSHOT_DESCRIPTION="Counterparty data volume backup $(date +%Y-%m-%d)"' >> /usr/local/bin/create-snapshot.sh
              echo 'aws ec2 create-snapshot --volume-id $VOLUME_ID --description "$SNAPSHOT_DESCRIPTION" --tag-specifications "ResourceType=snapshot,Tags=[{Key=Name,Value=counterparty-data-backup-$(date +%Y%m%d)}]"' >> /usr/local/bin/create-snapshot.sh
              echo '# Keep only the last 2 snapshots - delete older ones' >> /usr/local/bin/create-snapshot.sh
              echo 'OLD_SNAPSHOTS=$(aws ec2 describe-snapshots --filters "Name=volume-id,Values=$VOLUME_ID" --query "Snapshots[?StartTime!=\`null\`].[SnapshotId,StartTime]" --output text | sort -k2 | head -n -2 | awk "{print \$1}")' >> /usr/local/bin/create-snapshot.sh
              echo 'for SNAPSHOT in $OLD_SNAPSHOTS; do' >> /usr/local/bin/create-snapshot.sh
              echo '  echo "Deleting old snapshot: $SNAPSHOT"' >> /usr/local/bin/create-snapshot.sh
              echo '  aws ec2 delete-snapshot --snapshot-id $SNAPSHOT' >> /usr/local/bin/create-snapshot.sh
              echo 'done' >> /usr/local/bin/create-snapshot.sh
              
              chmod +x /usr/local/bin/create-snapshot.sh
              
              # Add monthly cron job
              echo "# Monthly snapshot of Counterparty data volume" > /etc/cron.d/counterparty-snapshots
              echo "0 2 1 * * root /usr/local/bin/create-snapshot.sh > /var/log/counterparty-snapshot.log 2>&1" >> /etc/cron.d/counterparty-snapshots
              
              echo "Snapshot scheduler configured"
          else
              echo "Automatic snapshots are disabled"
          fi

          # Add daily cron job for disk usage monitoring
          echo "# Daily monitoring jobs for Counterparty ARM64" > /etc/cron.d/counterparty-monitoring
          echo "# Check disk usage at 2:00 AM daily" >> /etc/cron.d/counterparty-monitoring
          echo "0 2 * * * root /usr/local/bin/check-disk-usage.sh > /dev/null 2>&1" >> /etc/cron.d/counterparty-monitoring
          echo "# Check Bitcoin sync status at 6:00 AM daily" >> /etc/cron.d/counterparty-monitoring
          echo "0 6 * * * root /usr/local/bin/monitor-bitcoin.sh --host localhost --port 8332 --user rpc --pass rpc > /dev/null 2>&1" >> /etc/cron.d/counterparty-monitoring
          
          # Set up basic SSH hardening
          log_info "Applying basic SSH security hardening..."
          if [ -f /etc/ssh/sshd_config ]; then
              # Disable root login
              sed -i 's/^#PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config
              # Use Protocol 2 only
              if ! grep -q "^Protocol 2" /etc/ssh/sshd_config; then
                  echo "Protocol 2" >> /etc/ssh/sshd_config
              fi
              # Restart SSH to apply changes - only if not in the middle of setup
              if systemctl is-active --quiet sshd; then
                  systemctl restart sshd
              fi
          fi

          echo "Deployment completed. Bitcoin and Counterparty services are now starting."
          echo "Check status with: ~/check-sync-status.sh"
          echo "Deploy time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "Build version: fixed-entrypoint-$(date -u +%s)"

# CloudWatch alarms for monitoring
  DataVolumeDiskSpaceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alert when ST1 volume usage exceeds 80%"
      MetricName: DiskSpaceUtilization
      Namespace: System/Linux
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref CounterpartyInstance
        - Name: MountPath
          Value: /bitcoin-data
        - Name: Filesystem
          Value: /dev/nvme1n1
      AlarmActions:
        - !Ref AWS::NoValue  # Replace with actual SNS topic ARN if available

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref CounterpartyInstance
  
  PublicIp:
    Description: Public IP address of the instance
    Value: !GetAtt CounterpartyInstance.PublicIp
  
  PublicDns:
    Description: Public DNS name of the instance
    Value: !GetAtt CounterpartyInstance.PublicDnsName
  
  DataVolumeId:
    Description: ID of the ST1 data volume
    Value: !Ref DataVolume
    
  SSHCommand:
    Description: Command to SSH into the instance
    Value: !Sub "ssh ubuntu@${CounterpartyInstance.PublicDnsName}"
    
  KeyPairInfo:
    Description: Information about the key pair used
    Value: !If 
      - CreateNewKey
      - !Sub "New key pair '${NewKeyPairName}' was created. Download the private key from the EC2 Console."
      - !Sub "Using existing key pair '${KeyName}'."
      
  SecurityGroupInfo:
    Description: Information about the security group used
    Value: !If
      - UseExistingSG
      - !Sub "Using existing security group '${ExistingSecurityGroupId}'"
      - !Sub "New security group '${CounterpartySecurityGroup}' was created."
        
  UbuntuInfo:
    Description: Information about the Ubuntu version used
    Value: !If
      - UseUbuntu2404
      - "Using Ubuntu 24.04 LTS (Noble Numbat)"
      - "Using Ubuntu 22.04 LTS (Jammy Jellyfish)"
      
  NetworkInfo:
    Description: Information about the selected network profile
    Value: !Sub "Using ${NetworkProfile} network profile"
    
  SnapshotsEnabled:
    Description: Information about snapshot configuration
    Value: !If
      - EnableSnapshotsCondition
      - "Automatic monthly EBS snapshots are enabled"
      - "Automatic EBS snapshots are disabled"
    
  StartupInfo:
    Description: Information on how to check status and logs
    Value: !Sub "To check Bitcoin sync status: ssh ubuntu@${CounterpartyInstance.PublicDnsName} '~/check-sync-status.sh'; To check Counterparty logs: ssh ubuntu@${CounterpartyInstance.PublicDnsName} 'docker logs counterparty-core'"
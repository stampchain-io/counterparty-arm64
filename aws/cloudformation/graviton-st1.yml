AWSTemplateFormatVersion: '2010-09-09'
Description: 'Counterparty ARM64 on AWS Graviton with ST1 volume - Cost-optimized'

# Define mappings for AMI IDs
Mappings:
  # Ubuntu 24.04 LTS (Noble Numbat) ARM64 AMIs - updated 2025-04-03
  Ubuntu2404:
    us-east-1:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - 2025-04-02
    us-east-2:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
    us-west-1:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
    us-west-2: 
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
    eu-west-1:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
    ap-northeast-1:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
    ap-southeast-1:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
    ap-southeast-2:
      ARM64AMI: ami-0e7cbbc0b03465aaf # Ubuntu 24.04 ARM64 - fallback to us-east-1
      
  # Ubuntu 22.04 LTS (Jammy Jellyfish) ARM64 AMIs - updated 2025-04-03
  Ubuntu2204:
    us-east-1:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - 2025-04-02
    us-east-2:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1
    us-west-1:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1
    us-west-2: 
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1
    eu-west-1:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1
    ap-northeast-1:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1
    ap-southeast-1:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1
    ap-southeast-2:
      ARM64AMI: ami-0836cb0ffc615b773 # Ubuntu 22.04 ARM64 - fallback to us-east-1

# Define conditions
Conditions:
  CreateNewKey: !Equals [!Ref CreateNewKeyPair, "true"]
  UseExistingSG: !Equals [!Ref UseExistingSecurityGroup, "true"]
  CreateNewSG: !Not [!Condition UseExistingSG]
  UseUbuntu2404: !Equals [!Ref UbuntuVersion, "24.04"]
  PublicRpcEnabled: !Equals [!Ref PublicRpcAccess, "true"]
  EnableSnapshotsCondition: !Equals [!Ref EnableSnapshots, "true"]
  
  # Network profile conditions
  UseMainnetProfile: !Equals [!Ref NetworkProfile, "mainnet"]
  UseTestnet3Profile: !Equals [!Ref NetworkProfile, "testnet3"]
  UseTestnet4Profile: !Equals [!Ref NetworkProfile, "testnet4"]
  UseRegtestProfile: !Equals [!Ref NetworkProfile, "regtest"]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Instance Configuration"
        Parameters:
          - InstanceType
          - KeyName
          - CreateNewKeyPair
          - NewKeyPairName
          - RootVolumeSize
          - DataVolumeSize
      - Label:
          default: "Storage and Backup"
        Parameters:
          - EnableSnapshots
          - BitcoinSnapshotPath
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - SubnetId
          - YourIp
          - UseExistingSecurityGroup
          - ExistingSecurityGroupId
      - Label:
          default: "AWS Credentials for S3"
        Parameters:
          - AwsAccessKey
          - AwsSecretKey
      - Label:
          default: "Counterparty Configuration"
        Parameters:
          - BitcoinVersion
          - CounterpartyBranch
          - CounterpartyTag
          - NetworkProfile
          - UbuntuVersion
    
    ParameterLabels:
      KeyName:
        default: "Key Pair"
      CreateNewKeyPair:
        default: "Create New Key Pair?"
      NewKeyPairName:
        default: "New Key Pair Name"
      UseExistingSecurityGroup:
        default: "Use Existing Security Group?"
      ExistingSecurityGroupId:
        default: "Existing Security Group ID"
      UbuntuVersion:
        default: "Ubuntu Version"
      NetworkProfile:
        default: "Network Profile (mainnet/testnet/regtest)"

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    
  BitcoinSnapshotPath:
    Type: String
    Description: "S3 path to Bitcoin blockchain data (can be blocks-only bootstrap: s3://bucket/prefix or compressed file: s3://bucket/prefix/file.tar.gz)"
    Default: ""

  CreateNewKeyPair:
    Description: Create a new key pair for this instance? (Not yet implemented, available in AWS Console)
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

  NewKeyPairName:
    Description: Name for the new key pair (only used if creating a new key pair)
    Type: String
    Default: "counterparty-keypair"
    MinLength: 1
    MaxLength: 255
    ConstraintDescription: Must be a valid key pair name.
  
  VpcId:
    Description: VPC ID where the instance will be launched
    Type: AWS::EC2::VPC::Id
  
  SubnetId:
    Description: Subnet ID where the instance will be launched
    Type: AWS::EC2::Subnet::Id
    
  UseExistingSecurityGroup:
    Description: Use an existing security group instead of creating a new one?
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  
  ExistingSecurityGroupId:
    Description: ID of existing security group (only used if UseExistingSecurityGroup is true)
    Type: String
    Default: "sg-12345678abcdef012"
    AllowedPattern: "^sg-[a-zA-Z0-9]{8,17}$"
    ConstraintDescription: "Security Group ID must be in the format sg-xxxxxxxx or sg-xxxxxxxxxxxxxxxxx"
    
  PublicRpcAccess:
    Description: Allow public access to RPC port 4000? (Warning - Security Risk)
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
      
  
  InstanceType:
    Description: EC2 instance type (Graviton-based)
    Type: String
    Default: c6g.large
    AllowedValues:
      - c6g.large     # Compute optimized, best for initial sync (~$77/month)
      - t4g.large     # Lower cost, burstable performance (~$67/month)
      - t4g.xlarge    # Burstable, more memory (~$134/month)
      - m6g.large     # Balanced performance (~$80/month)
      - m6g.xlarge    # Higher memory, balanced
      - m7g.large     # Current gen, good balance (more expensive)
      - m7g.xlarge    # Current gen, higher memory
      - m7g.2xlarge   # Current gen, highest performance
      - c7g.large     # Latest compute optimized (most expensive)
      - c7g.xlarge    # Compute optimized, higher performance
    ConstraintDescription: Must be a valid Graviton-based instance type.
  
  RootVolumeSize:
    Description: Size of the root volume in GB
    Type: Number
    Default: 20
    MinValue: 8
    MaxValue: 500
  
  DataVolumeSize:
    Description: Size of the data volume in GB
    Type: Number
    Default: 700
    MinValue: 500
    MaxValue: 16000
  
  YourIp:
    Description: Your IP address to allow SSH access (e.g., 123.123.123.123/32)
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
  
  BitcoinVersion:
    Description: Bitcoin Core version to use
    Type: String
    Default: "26.0"
  
  CounterpartyBranch:
    Description: Counterparty branch to use
    Type: String
    Default: "master"
  
  CounterpartyTag:
    Description: Counterparty tag to use (optional)
    Type: String
    Default: ""
    
  UbuntuVersion:
    Description: Ubuntu version to use
    Type: String
    Default: "24.04"
    AllowedValues:
      - "24.04"
      - "22.04"
      
  GitHubToken:
    Description: GitHub personal access token for private repository access (optional)
    Type: String
    Default: ""
    NoEcho: true
    
  AwsAccessKey:
    Description: AWS Access Key for S3 bucket access (optional, for private S3 buckets)
    Type: String
    Default: ""
    NoEcho: true
    
  AwsSecretKey:
    Description: AWS Secret Key for S3 bucket access (optional, for private S3 buckets)
    Type: String
    Default: ""
    NoEcho: true
      
  NetworkProfile:
    Description: Bitcoin/Counterparty network profile to use
    Type: String
    Default: "mainnet"
    AllowedValues:
      - "mainnet"
      - "testnet3"
      - "testnet4"
      - "regtest"
      
  EnableSnapshots:
    Description: Enable automatic EBS snapshots of the data volume
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

Resources:
  # Security Group for the Counterparty node (created if UseExistingSecurityGroup is false)
  CounterpartySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateNewSG
    Properties:
      GroupDescription: Security group for Counterparty node
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref YourIp
        # Bitcoin P2P ports - conditionally exposed based on network profile
        # Mainnet
        - !If
          - UseMainnetProfile
          - IpProtocol: tcp
            FromPort: 8333
            ToPort: 8333
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        # Testnet3
        - !If
          - UseTestnet3Profile
          - IpProtocol: tcp
            FromPort: 18333
            ToPort: 18333
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        # Testnet4
        - !If
          - UseTestnet4Profile
          - IpProtocol: tcp
            FromPort: 49333
            ToPort: 49333
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
        # Regtest
        - !If
          - UseRegtestProfile
          - IpProtocol: tcp
            FromPort: 29333
            ToPort: 29333
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
            
        # Counterparty API websocket port
        - IpProtocol: tcp
          FromPort: 4001
          ToPort: 4001
          CidrIp: 0.0.0.0/0
        # Bitcoin RPC ports - conditionally exposed based on network profile
        # Mainnet RPC
        - !If
          - UseMainnetProfile
          - IpProtocol: tcp
            FromPort: 8332
            ToPort: 8332
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Testnet3 RPC
        - !If
          - UseTestnet3Profile
          - IpProtocol: tcp
            FromPort: 18332
            ToPort: 18332
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Testnet4 RPC
        - !If
          - UseTestnet4Profile
          - IpProtocol: tcp
            FromPort: 48332
            ToPort: 48332
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Regtest RPC
        - !If
          - UseRegtestProfile
          - IpProtocol: tcp
            FromPort: 18443
            ToPort: 18443
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Counterparty API ports - conditionally exposed based on network profile
        # Mainnet API
        - !If
          - UseMainnetProfile
          - IpProtocol: tcp
            FromPort: 4000
            ToPort: 4000
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Testnet3 API
        - !If
          - UseTestnet3Profile
          - IpProtocol: tcp
            FromPort: 14000
            ToPort: 14000
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Testnet4 API
        - !If
          - UseTestnet4Profile
          - IpProtocol: tcp
            FromPort: 44000
            ToPort: 44000
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
        # Regtest API
        - !If
          - UseRegtestProfile
          - IpProtocol: tcp
            FromPort: 24000
            ToPort: 24000
            CidrIp: !Ref YourIp
          - !Ref AWS::NoValue
          
        # Rule 2: Allow VPC internal access using RFC1918 private ranges
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: 10.0.0.0/8  # AWS typically uses this range
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: 172.16.0.0/12
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: 192.168.0.0/16
        
        # Rule 3: Public access to Counterparty API (if enabled)
        - !If
          - PublicRpcEnabled
          - IpProtocol: tcp
            FromPort: 4000
            ToPort: 4000
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sg"

  # ST1 volume for blockchain data
  DataVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !GetAtt CounterpartyInstance.AvailabilityZone
      Size: !Ref DataVolumeSize
      VolumeType: st1
      Tags:
        - Key: Name
          Value: counterparty-data-st1

  # Volume attachment
  DataVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref CounterpartyInstance
      VolumeId: !Ref DataVolume
      Device: /dev/sdf

  # IAM Role for the instance
  CounterpartyInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies: 
        - PolicyName: CounterpartyS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - 'arn:aws:s3:::bitcoin-blockchain-snapshots'
                  - 'arn:aws:s3:::bitcoin-blockchain-snapshots/*'
        - !If
          - EnableSnapshotsCondition
          - PolicyName: CounterpartySnapshotPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:CreateSnapshot
                    - ec2:DeleteSnapshot
                    - ec2:DescribeSnapshots
                    - ec2:DescribeVolumes
                    - ec2:ModifySnapshotAttribute
                    - ec2:ResetSnapshotAttribute
                  Resource: '*'
          - !Ref AWS::NoValue

  # Instance profile
  CounterpartyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref CounterpartyInstanceRole

  # Optional: Create a new key pair if requested
  # Note: CloudFormation doesn't currently support returning the private key content,
  # so we recommend creating the key pair in the console if needed
  CounterpartyKeyPair:
    Type: AWS::EC2::KeyPair
    Condition: CreateNewKey
    Properties:
      KeyName: !Ref NewKeyPairName
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-keypair"

  # EC2 Instance
  CounterpartyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !If
        - UseUbuntu2404
        - !FindInMap [Ubuntu2404, !Ref "AWS::Region", ARM64AMI]
        - !FindInMap [Ubuntu2204, !Ref "AWS::Region", ARM64AMI]
      KeyName: !If [CreateNewKey, !Ref CounterpartyKeyPair, !Ref KeyName]
      IamInstanceProfile: !Ref CounterpartyInstanceProfile
      SecurityGroupIds:
        - !If [UseExistingSG, !Ref ExistingSecurityGroupId, !Ref CounterpartySecurityGroup]
      SubnetId: !Ref SubnetId
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref RootVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
      Monitoring: false  # Disable detailed CloudWatch monitoring to reduce costs
      Tags:
        - Key: Name
          Value: counterparty-arm64
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Compressed UserData script - download and run bootstrap.sh from GitHub
          apt-get update && apt-get install -y curl
          mkdir -p /tmp/setup
          
          # Use stampchain-io main branch
          curl -s https://raw.githubusercontent.com/stampchain-io/counterparty-arm64/main/aws/scripts/bootstrap.sh > /tmp/setup/bootstrap.sh
          chmod +x /tmp/setup/bootstrap.sh
          
          # Enable debug logging for download process
          mkdir -p /tmp/download_logs
          
          # Export the snapshot path if provided
          export BITCOIN_SNAPSHOT_PATH="${BitcoinSnapshotPath}"
          export SNAPSHOT_DEBUG_MODE="true"
          
          # Run the bootstrap script with AWS credentials if provided
          /tmp/setup/bootstrap.sh ${BitcoinVersion} ${CounterpartyBranch} ${CounterpartyTag} ${NetworkProfile} ${GitHubToken} "${AwsAccessKey}" "${AwsSecretKey}" 2>&1 | tee -a /tmp/download_logs/bootstrap.log

# CloudWatch alarms removed to reduce costs
# Custom disk space monitoring is provided by check-disk-usage.sh script

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref CounterpartyInstance
  
  PublicIp:
    Description: Public IP address of the instance
    Value: !GetAtt CounterpartyInstance.PublicIp
  
  PublicDns:
    Description: Public DNS name of the instance
    Value: !GetAtt CounterpartyInstance.PublicDnsName
  
  DataVolumeId:
    Description: ID of the ST1 data volume
    Value: !Ref DataVolume
    
  SSHCommand:
    Description: Command to SSH into the instance
    Value: !Sub "ssh ubuntu@${CounterpartyInstance.PublicDnsName}"
    
  KeyPairInfo:
    Description: Information about the key pair used
    Value: !If 
      - CreateNewKey
      - !Sub "New key pair '${NewKeyPairName}' was created. Download the private key from the EC2 Console."
      - !Sub "Using existing key pair '${KeyName}'."
      
  SecurityGroupInfo:
    Description: Information about the security group used
    Value: !If
      - UseExistingSG
      - !Sub "Using existing security group '${ExistingSecurityGroupId}'"
      - !Sub "New security group '${CounterpartySecurityGroup}' was created."
        
  UbuntuInfo:
    Description: Information about the Ubuntu version used
    Value: !If
      - UseUbuntu2404
      - "Using Ubuntu 24.04 LTS (Noble Numbat)"
      - "Using Ubuntu 22.04 LTS (Jammy Jellyfish)"
      
  NetworkInfo:
    Description: Information about the selected network profile
    Value: !Sub "Using ${NetworkProfile} network profile"
    
  SnapshotsEnabled:
    Description: Information about snapshot configuration
    Value: !If
      - EnableSnapshotsCondition
      - "Automatic monthly EBS snapshots are enabled"
      - "Automatic EBS snapshots are disabled"
    
  StartupInfo:
    Description: Information on how to check status and logs
    Value: !Sub "To check Bitcoin sync status: ssh ubuntu@${CounterpartyInstance.PublicDnsName} '~/check-sync-status.sh'; To check Counterparty logs: ssh ubuntu@${CounterpartyInstance.PublicDnsName} 'docker logs counterparty-core'"